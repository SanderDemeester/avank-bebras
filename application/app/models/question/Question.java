package models.question;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import models.data.Language;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * The base class where questions for the competitions are stored in.
 * @author Ruben Taelman
 *
 */
public abstract class Question {
    
    /** These fields are generated on reading the XML **/
    protected String ID;
    protected Server server;
    protected QuestionType type;
	protected List<Language> languages;
	protected Map<Language, String> titles;
	protected Map<Language, String> indexes;
	protected Map<Language, String> feedbacks;
	
	/** These fields can be altered afterwards **/
	public boolean official;
	public boolean active;
	
	/** Static fields **/
	private static final String XML_ROOT = "/root";
	private static final Map<String, QuestionFactory> QUESTION_TYPE_NAMES = new HashMap<String, QuestionFactory>();
	static {
	    QUESTION_TYPE_NAMES.put("multiple-choice-question", new MultipleChoiceQuestionFactory());
	    QUESTION_TYPE_NAMES.put("regex-question", new RegexQuestionFactory());
	}
	
	/**
	 * Don't just call this, Question need to be generated by calling the static getFromXml(String xml)
	 */
	protected Question() {
		this.languages = new ArrayList<Language>();
		this.titles = new HashMap<Language, String>();
		this.indexes = new HashMap<Language, String>();
		this.feedbacks = new HashMap<Language, String>();
	}
	
	/**
	 * Creates a new question from a certain XML input
	 * @param xml  absolute URL of an xml file
	 * @return a new question
	 * @throws QuestionBuilderException possible things that can go wrong
	 */
	public static Question getFromXml(String xml) throws QuestionBuilderException {
	    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	    DocumentBuilder builder;
	    
	    Question question = null;
        try {
            builder = factory.newDocumentBuilder();
            Document doc = builder.parse(xml);
            XPathFactory xPathfactory = XPathFactory.newInstance();
            XPath xpath = xPathfactory.newXPath();
            XPathExpression expr = xpath.compile(XML_ROOT);
            NodeList nodeList = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
            nodeList = nodeList.item(0).getChildNodes();
            String type = nodeList.item(1).getNodeName();
            question = QUESTION_TYPE_NAMES.get(type).newQuestion(nodeList);
        } catch (ParserConfigurationException e) {
            throw new QuestionBuilderException("Invalid XML, can't be parsed.");
    	} catch (SAXException e) {
    	    throw new QuestionBuilderException("SAX Error.");
        } catch (IOException e) {
            throw new QuestionBuilderException("Can't read the XML file.");
        } catch (XPathExpressionException e) {
            throw new QuestionBuilderException("Can't select the root node.");
    	} catch (NullPointerException e) {
    	    throw new QuestionBuilderException("Unknown question type.");
        }        
        
		return question;
	}
	
	/**
	 * Is the question official
	 * @return is official
	 */
	public boolean isOfficial() {
		return official;
	}
	
	/**
	 * Sets the official value
	 * @param official is this question official
	 */
	public void setOfficial(boolean official) {
		this.official = official;
	}
	
	/**
	 * Is the question active
	 * @return is active
	 */
	public boolean isActive() {
		return active;
	}
	
	/**
	 * Sets the active value
	 * @param active is this question active
	 */
	public void setActive(boolean active) {
		this.active = active;
	}
	
	/**
	 * Returns the server on which this question is located
	 * @return the server location of this question
	 */
	public Server getServer() {
		return server;
	}
	
	/**
	 * Sets the server on which this question is located
	 * @param server the server location of this question
	 */
	public void setServer(Server server) {
		this.server = server;
	}
	
	/**
	 * Get the question type
	 * @return the type of the question
	 */
	public QuestionType getType() {
		return type;
	}
	
	/**
	 * Add a possible language to the question
	 * @param language a language
	 */
	public void addLanguage(Language language) {
	    this.languages.add(language);
	}
	
	/**
	 * Returns a list of all available languages in this question
	 * @return list of languages
	 */
	public List<Language> getLanguages() {
		return languages;
	}
	
	/**
	 * Returns the unique ID of this question on a certain server
	 * @return the ID of a question
	 */
	public String getID() {
		return ID;
	}
	
	/**
	 * Returns the title in a certain Language
	 * @param language chosen language
	 * @return the title of this question in the given language
	 */
	public String getTitles(Language language) {
		return this.titles.get(language);
	}
	
	/**
	 * Sets the title for a given language
	 * @param title the title for the question
	 * @param language chosen language
	 */
	public void setTitle(String title, Language language) {
	    this.titles.put(language, title);
	}
	
	/**
     * Sets the index file name for a given language
     * @param title the index file name for the question
     * @param language chosen language
     */
    public void setIndex(String title, Language language) {
        this.indexes.put(language, title);
    }
    
    /**
     * Sets the feedback file name for a given language
     * @param title the feedback file name for the question
     * @param language chosen language
     */
    public void setFeedback(String title, Language language) {
        this.feedbacks.put(language, title);
    }
	
}
