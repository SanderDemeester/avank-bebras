# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# Home page
GET     /                           controllers.UserController.landingPage()
GET		/logout						controllers.UserController.logout()
GET		/info						controllers.Application.index()

# Registration/signup
GET		/signup						controllers.UserController.signup()
POST	/signup 					controllers.UserController.register()

# Login
GET		/login_validate		controllers.UserController.validate_login(id, password)

# Bootstrap resources
GET     /assets/img/glyphicons-halflings-white.png       controllers.Assets.at(path="/public", file="/images/bootstrap/glyphicons-halflings-white.png")
GET     /assets/img/glyphicons-halflings.png             controllers.Assets.at(path="/public", file="/images/bootstrap/glyphicons-halflings.png")
GET     /assets/stylesheets/bootstrap.min.css            controllers.Assets.at(path="/public", file="/stylesheets/bootstrap/bootstrap.min.css")
GET     /assets/stylesheets/bootstrap-responsive.min.css controllers.Assets.at(path="/public", file="/stylesheets/bootstrap/bootstrap-responsive.min.css")

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Question module
GET		/questioneditor					controllers.question.QuestionEditorController.index()
GET		/questioneditor/create/:name	controllers.question.QuestionEditorController.create(name)
POST    /questioneditor/create/upload   controllers.question.QuestionEditorController.importUpload()
POST    /questioneditor/upload      	controllers.question.QuestionEditorController.upload()
GET     /questioneditor/delete      	controllers.question.QuestionEditorController.delete(name)
GET     /questioneditor/files.json      controllers.question.QuestionEditorController.getFiles()
GET     /questioneditor/validate      	controllers.question.QuestionEditorController.validate(json)
GET     /questioneditor/export     		controllers.question.QuestionEditorController.export(json)
GET     /questioneditor/submit      	controllers.question.QuestionEditorController.submit(json)

# Server management
GET     /servers                    controllers.question.ServerController.list(p:Int ?= 0, s ?= "id", o ?= "asc", f ?= "")
GET     /server/new                 controllers.question.ServerController.create()
POST    /servers/                   controllers.question.ServerController.save()
GET     /servers/:name              controllers.question.ServerController.edit(name)
POST    /servers/:name              controllers.question.ServerController.update(name)
GET     /server/remove/:name        controllers.question.ServerController.remove(name)

# Contests module
GET     /contests                   controllers.competition.CompetitionController.index()
GET     /contest/new               controllers.competition.CompetitionController.create()
POST    /contests                   controllers.competition.CompetitionController.save()

# Question Management
GET     /questions                  		 controllers.question.QuestionController.list(p:Int ?= 0, s ?= "id", o ?= "asc", f ?= "")
GET     /questionsubmits            		 controllers.question.QuestionController.listSubmits(p:Int ?= 0, f ?= "")
GET     /questionsubmits/remove/:user/:file  controllers.question.QuestionController.removeSubmit(user, file)
GET     /questionsubmits/approve/:user/:file controllers.question.QuestionController.approve(user, file)
POST    /questionsubmits/approve/:user/:file controllers.question.QuestionController.saveApprove(user, file)
POST    /question/                  		 controllers.question.QuestionController.save()
GET     /questions/:name              		 controllers.question.QuestionController.edit(name)
POST    /questions/:name              		 controllers.question.QuestionController.update(name)
GET     /question/remove/:name      		 controllers.question.QuestionController.remove(name)

# FAQ
GET		/faq						controllers.faq.FAQController.getFAQ()
GET		/manageFAQ					controllers.faq.FAQController.list(p:Int ?= 0, s ?= "language", o ?= "asc", f ?= "")

GET     /manageFAQ/new                controllers.faq.FAQController.create()
POST    /manageFAQ/                   controllers.faq.FAQController.save()

GET     /manageFAQ/edit/:name              controllers.faq.FAQController.edit(name)
POST    /manageFAQ/edit/:name              controllers.faq.FAQController.update(name)

GET    /manageFAQ/remove/:name        controllers.faq.FAQController.remove(name)

# Schools
GET		/schools						controllers.schools.SchoolController.viewSchools()
GET		/schools/new					controllers.schools.SchoolController.create()
POST	/schools/						controllers.schools.SchoolController.save()

# Data Management
GET		/manage/:dataType/show		controllers.data.DataController.show(dataType)
GET		/manage/:dataType/remove	controllers.data.DataController.remove(dataType, id)
GET		/manage/:dataType/add		controllers.data.DataController.add(dataType)

# Bootstrap resources
GET     /assets/img/glyphicons-halflings-white.png      controllers.Assets.at(path="/public", file="/images/bootstrap/glyphicons-halflings-white.png")
GET     /assets/img/glyphicons-halflings.png            controllers.Assets.at(path="/public", file="/images/bootstrap/glyphicons-halflings.png")

# Settings
GET		/personal					controllers.user.PersonalPageController.show()
GET		/editpersonal				controllers.user.PersonalPageController.edit()
POST	/editpersonal/submit		controllers.user.PersonalPageController.changeInformation()
GET		/passwedit					controllers.user.PersonalPageController.changePassword()
POST	/passwedit/apply			controllers.user.PersonalPageController.checkValid()

# Classes

GET		/classes					controllers.classgroups.ClassGroupController.viewClasses(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET 		/classes/add					controllers.classgroups.ClassGroupController.create()
POST		/classes/					controllers.classgroups.ClassGroupController.save()
GET		/classes/view/:id				controllers.classgroups.ClassPupilController.viewClass(id, p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")


GET		/classes/view/:id/:studid/remove		controllers.classgroups.ClassPupilController.removeStudent(id,studid)
GET		/classes/view/:id/add			controllers.classgroups.ClassPupilController.addExistingStudent(id)
POST		/classes/view/:id/				controllers.classgroups.ClassPupilController.saveExisting(id)

GET		/classes/view/:id/edit			controllers.classgroups.ClassPupilController.editClass(id)

GET		/classes/view/:id/help			controllers.classgroups.HelpTeacherController.viewHelp(id,p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET		/classes/view/:id/help/:teachid/remove	controllers.classgroups.HelpTeacherController.removeHelp(id,teachid)
GET		/classes/view/:id/help/add			controllers.classgroups.HelpTeacherController.create(id)
POST		/classes/view/:id/help/			controllers.classgroups.HelpTeacherController.save(id)

GET		/classes/:id/old			controllers.classgroups.ClassPupilController.viewOldPupils(id,p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
